{"version":3,"sources":["components/weather.js","components/navbar.js","components/events.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["weather","handleLength","text","main","className","name","sys","country","style","width","height","Math","round","temp","fontSize","navbar","color","dark","events","handleAddBtn","handleDelete","d","Date","days","months","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateHandler","length","map","event","key","_id","moment","createdAt","format","title","onClick","marginTop","location","description","form","handleShow","handleClose","handleAddEvent","handleInputChange","Modal","show","onHide","onSubmit","Header","closeButton","Title","Body","label","icon","hint","group","type","id","onChange","required","Footer","Button","variant","App","React","useState","modalIsOpen","state","setState","setCountry","setWeather","useEffect","window","navigator","geolocation","getCurrentPosition","res","lat","coords","latitude","long","longitude","url","api","a","fetch","response","json","results","components","console","log","fetchData","query","weatherResponse","data","weatherData","then","responseData","catch","err","md","time","method","body","JSON","stringify","headers","postData","newArray","push","preventDefault","inputName","e","target","value","prevState","newEvent","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.329c3d54.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FiSun } from 'react-icons/fi'\r\nimport { FaLightbulb } from 'react-icons/fa'\r\n\r\nfunction weather({handleLength, weather}) {\r\n    let text = ''\r\n    if(typeof weather.main !== 'undefined') {\r\n        if(weather.weather[0].main === 'Clouds' || weather.weather[0].main === 'Rains') {\r\n            text = \"Don't forget to go with your unbrella today in case it rains today.\"\r\n        }\r\n        else if(weather.weather[0].main === 'Sunny') {\r\n            text = \"Dont't forget to out with your Sunglasses in case it's sunny today.\"\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h2 className = 'h3-responsive mt-3'>Schedule</h2>\r\n            <h4>It is going to be a busy day today. You have {handleLength} events today.</h4>\r\n            {typeof weather.main !== 'undefined' ?\r\n                <>\r\n                    <h3 className = 'h3-responsive mt-3'>\r\n                        {weather.name}, {weather.sys.country}\r\n                    </h3>\r\n                    <FiSun style = {{width: '40px', height: '40px'}} className = 'mr-2 mt-2 mb-1' /><span>{weather.weather[0].main}</span> <br />\r\n                    <FaLightbulb style = {{width: '40px', height: '40px'}} className = 'mr-2 mb-2'/> \r\n                    <span className = 'mb-2'>\r\n                        {Math.round(weather.main.temp)} <i style ={{fontSize: '30px'}}>{'\\u00b0'}</i>\r\n                    </span>\r\n                    <div  style = {{fontSize: '20px'}}>\r\n                    {text}\r\n                    </div>\r\n                </> : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default weather\r\n","import React from 'react'\r\nimport { MDBNavbar, MDBNavbarBrand} from 'mdbreact'\r\n\r\nfunction navbar() {\r\n    return (\r\n        <div>\r\n            <MDBNavbar color=\"indigo\" dark>\r\n                <MDBNavbarBrand>\r\n                    <strong className=\"white-text\">Agenda App</strong>\r\n                </MDBNavbarBrand>\r\n            </MDBNavbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default navbar\r\n","import React from 'react'\r\nimport { MDBBadge } from 'mdbreact'\r\nimport { FaLocationArrow } from 'react-icons/fa'\r\nimport moment from 'moment'\r\n\r\n\r\nfunction events({ events, handleAddBtn, handleDelete, }) {\r\n    // function that handles date in day date month and year format.\r\n    const dateHandler = (d = new Date()) => {\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'] ;\r\n        const months = ['January', 'Febuary', 'March', 'April', 'May', 'June', 'July', 'August',\r\n        'September', 'October', 'November', 'December']\r\n    \r\n        const day = days[d.getDay()] ;\r\n        const date = d.getDate() ;\r\n        const month = months[d.getMonth()]\r\n        const year = d.getFullYear() ;\r\n        \r\n        return (`${day} ${date} ${month} ${year}`)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className = 'my-3'>{dateHandler()}</h2>\r\n            {events.length !== 'undefined' ? events.map((event) => (\r\n                <div key = {event._id} className = 'mb-3'>\r\n                    <div className = 'media'>\r\n                        <h4 className = 'h4-responsive font-weight-bold'>\r\n                            {moment(event.createdAt).format('LT')}\r\n                        </h4>\r\n                        <div className = 'media-body ml-3'>\r\n                            <h5>{event.title}</h5>\r\n                            <MDBBadge\r\n                            className = 'float-right' \r\n                            color = 'danger'\r\n                            onClick = {() => handleDelete(event._id)}\r\n                            style = {{marginTop: '-25px'}}>\r\n                                -\r\n                            </MDBBadge>\r\n                            <hr className = 'hr-bold mt-2 mb-2' /> \r\n                            <div className = 'media'>\r\n                                <FaLocationArrow color = \"blue\" />\r\n                                <small className = \"ml-2\">{event.location}</small>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {event.description &&\r\n                    <div className = 'p-2 mb-4 mt-2 blue-grey lighten-5 blue-grey lighten-5'>\r\n                        {event.description}\r\n                    </div>} \r\n                </div>\r\n            )) : null}       \r\n            \r\n            <div className = 'justify-content-center text-center'>\r\n                <button className = 'btn bg-primary text-white' onClick = {handleAddBtn}>\r\n                    Add Event\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default events\r\n","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport { MDBInput } from 'mdbreact'\r\n\r\nfunction form({handleShow, handleClose, handleAddEvent, handleInputChange}) {\r\n    return (\r\n    <Modal show = {handleShow} onHide = {handleClose}>\r\n      <form className=\"mx-3 grey-text\" onSubmit = {handleAddEvent}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Add new event</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n            <MDBInput\r\n              name=\"time\"\r\n              label=\"Time\"\r\n              icon=\"clock\"\r\n              hint=\"12:30\"\r\n              group\r\n              type=\"text\"\r\n              id=\"materialFormRegisterNameEx\"\r\n              onChange = {handleInputChange('time')}\r\n              id=\"materialFormRegisterNameEx\"\r\n              className = 'was-validated'\r\n              required\r\n              // outline\r\n            />\r\n            <MDBInput\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              icon=\"edit\"\r\n              hint=\"Briefing\"\r\n              group\r\n              type=\"text\"\r\n              onChange = {handleInputChange('title')}\r\n              id=\"materialFormRegisterNameEx2\"\r\n              className = ' was-validated'\r\n              required\r\n            />\r\n            <MDBInput\r\n              name=\"location\"\r\n              label=\"Location (optional)\"\r\n              icon=\"map\"\r\n              group\r\n              type=\"text\"\r\n              onChange = {handleInputChange('location')}\r\n              id=\"materialFormRegisterNameEx\"\r\n            />\r\n            <MDBInput\r\n              name=\"description\"\r\n              label=\"Description (optional)\"\r\n              icon=\"sticky-note\"\r\n              group\r\n              type=\"textarea\"\r\n              onChange = {handleInputChange('description')}\r\n              id=\"materialFormRegisterNameEx4\"\r\n            />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick = {handleClose}>Close</Button>\r\n            <Button className = 'btn' variant=\"primary\" type = \"submit\">Add</Button>\r\n        </Modal.Footer>\r\n      </form> \r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default form\r\n","import React from 'react';\nimport './App.css';\nimport Weather from './components/weather'\nimport Navbar from './components/navbar'\nimport {  MDBContainer, MDBRow, MDBCol, } from 'mdbreact'\nimport Events from './components/events'\nimport Form from './components/form'\n\nfunction App() {\n\n  const [state, setState] = React.useState({\n    events: [],\n    modalIsOpen: false,\n  })\n\n  const [country, setCountry] = React.useState('')\n\n  // Controlled by the event components. Toggles the modal.\n  const handleAddBtn = () => {\n    setState((prevState) => {\n      return {...state, modalIsOpen: !prevState.modalIsOpen}\n    })\n  }\n\n  // Allows closing of the modal when clicking outside the screen i.e backdrop. \n  const handleClose = () => {\n    setState(() => (\n      {...state, modalIsOpen: !state.modalIsOpen}\n    ))\n  }\n\n  // Takes the input field name as an argument.\n  const handleInputChange = inputName => e => {\n    setState({...state,\n      [inputName]: e.target.value\n    });\n  };\n\n  // Handles the addition of events into both the database and the state.\n  const handleAddEvent = (event) => {\n    // Do we have an event? if yes, new event = last event length + 1, if no event, the first event\n    // should have an id of 1.\n    const id = state.events.length ? state.events[state.events.length - 1].id + 1 : 1\n    const time = state.time\n    const title = state.title\n    const description = state.description\n    const location = state.location\n\n    console.log(title,description,location)\n    const sendData = (url, data) => {\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {'Content-Type': 'application/json'}\n      }).then(response => response.json())\n    }\n\n    const postData = () => {\n      sendData('http://localhost:5000/agenda/add/', {\n        title: title,\n        description: description,\n        location: location\n      })\n    }\n\n    postData()\n    \n    const newArray = [] ;\n    newArray.push(...state.events, {id, time, title, description, location}) ;\n    setState({events: newArray}) \n\n    event.preventDefault()\n  }\n\n  // deletes an event from the database and use the id provided by mongodb to\n  // delete and event.\n  const handleDelete = id => {\n    fetch(\"http://localhost:5000/agenda/\" + id, {\n      method: 'DELETE'\n    })\n    .then(response => response.json())\n    .then(responseData => console.log(responseData))\n\n    const newEvent = state.events.filter(e => e._id !== id)\n    setState(() => (\n      {...state, events: newEvent}\n    ))\n  }\n\n  // Gets the weather and displays it depending a users country.\n  const [weather, setWeather] = React.useState({})\n  // const [query, setQuery] = React.useState('Nigeria')\n  \n  // This code runs immediately when the country changes. Country is my dependency.\n  React.useEffect(() => {\n    const myData = () => {\n      // get latitude and longitude of the users current position.\n      window.navigator.geolocation.getCurrentPosition((res) => {\n      const lat = res.coords.latitude\n      const long = res.coords.longitude\n\n      // This services gives a specific country using lat and long.\n      const url = `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${long}&key=7f7c3422b0244b43afc54f31c2ad23c9&language=en&pretty=1`\n      \n      const api = {\n        key: \"1f92e6337f4dd8d7396a77a9c3dac39f\",\n        base: \"https://api.openweathermap.org/data/2.5/\"\n      }\n      // Get the country of a specific user using the lat and long.\n      const fetchData = async () => {\n        try {\n          const response = await fetch(url)\n          const { results } = await response.json()\n          setCountry(results[0].components.country)\n        }\n        catch(err) {\n          console.log(err)\n        }\n      }\n      fetchData()\n      const query = country ;\n      const weatherData = async () => {\n        try {\n          const weatherResponse = await fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n          const data = await weatherResponse.json()\n          console.log(data)\n          return setWeather(data)\n        }\n\n        catch(err) {\n          console.log(err)\n        }\n      }\n\n      weatherData()\n      \n      }, () => {\n        console.log('failed!')\n      })  \n    }\n    myData()\n  \n    // checks and fetches any agenda in the database.\n  fetch('http://localhost:5000/agenda/').then(response => response.json())\n  .then((responseData) => {\n      console.log(responseData)\n      setState({...state, events: responseData})\n  })\n  .catch(err => console.log(err))\n\n  }, [country])\n\n  // Destructure events from state.\n  const { events } = state;\n  console.log(country)\n  \n  return (\n    <>\n      <Navbar />\n      <MDBContainer className=\"App\">\n        <MDBRow>\n          <MDBCol md = '9'>\n          <Form \n            handleShow = {state.modalIsOpen}\n            handleClose = {handleClose} \n            handleAddEvent = {handleAddEvent}\n            handleInputChange = {handleInputChange}\n          />\n            <Events \n              events = {events}\n              handleAddBtn = {handleAddBtn}\n              handleDelete = {handleDelete}\n              key = {state._id}\n            />\n          </MDBCol>\n\n          <MDBCol>\n            <Weather \n              handleLength = {events.length}\n              weather = {weather}\n            />\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}